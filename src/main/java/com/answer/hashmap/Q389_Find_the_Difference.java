package com.answer.hashmap;

import java.util.*;

public class Q389_Find_the_Difference {
    /**
     * 找不同
     * 给定两个字符串 s 和 t ，它们只包含小写字母。
     * 字符串 t 由字符串 s 随机重排，然后在随机位置添加一个字母。
     * 请找出在 t 中被添加的字母。
     * You are given two strings s and t.
     * String t is generated by random shuffling string s and then add one more letter at a random position.
     * Return the letter that was added to t.
     *
     * 示例 1：
     * 输入：s = "abcd", t = "abcde"
     * 输出："e"
     * 解释：'e' 是那个被添加的字母。
     * 示例 2：
     * 输入：s = "", t = "y"
     * 输出："y"
     */
    public static void main(String[] args) {
        String s = "abcd";
        String t = "abcde";
        char c = findTheDifference(s, t);
        System.out.println(c);
    }
    /**
     * HashSet - doesn't work for "a"& "aa"
     * 提交后有java.util.NoSuchElementException
     */
    static public char findTheDifference(String s, String t) {
        Set<Character> set = new HashSet<>();

        char[] c1 = t.toCharArray();
        for(char c : c1){
            set.add(c);
        }
        char[] c2 = s.toCharArray();
        for(char c : c2){
            set.remove(c);
        }
        return set.iterator().next();
    }
    /**
     * HashSet - this method works 这个方法可以运行
     */
   static public char findTheDifference_0(String s, String t) {
        Set<Character> set = new HashSet<>();
        char[] array = s.concat(t).toCharArray();
        for(int i = 0; i < array.length; i++){
            if(set.contains(array[i])){
                set.remove(array[i]);
            }else{
                set.add(array[i]);
            }
        }
        return (char)set.toArray()[0];
        // return set.iterator().next(); // works too
    }
    /**
     * HashMap
     */
    public char findTheDifference_0a(String s, String t) {
        char extraChar = '\0';
        // Prepare a counter for string s.
        // This hashmap holds the characters as keys and respective frequency as value.
        HashMap <Character,Integer> counterS = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            counterS.put(ch, counterS.getOrDefault(ch, 0) + 1);
        }
        // Iterate through string t and find the character which is not in s.
        for (int i = 0; i < t.length(); i++) {
            char ch = t.charAt(i);
            if (!counterS.containsKey(ch)) {
                extraChar = ch;
                break;
            } else {
                int countOfChar = counterS.get(ch);
                if(countOfChar == 0) {
                    return ch;
                }
                // Once a match is found we reduce frequency left.
                // This eliminates the possibility of a false match later.
                counterS.put(ch, countOfChar - 1);
            }
        }
        return extraChar;
    }
    /**
     * Use counter 用数组对hash
     * int[26]是常数，所以空间复杂度O(1)
     */
    public static char findTheDifference_1(String s, String t) {
        int[] count = new int[26]; // 计数
        char[] c1 = t.toCharArray();
        char[] c2 = s.toCharArray();
        // s和t长度可能不一样，所以要遍历两边
        for(char c : c1){
            count[c -'a']++;
        }
        for(char c : c2){
            count[c -'a']--;
        }
        // 题目有要求t.length == s.length + 1，所以可以遍历一边
/*        for(int i = 0; i < c1.length; i++){
            count[c1[i] -'a']++;
            if(i < c2.length){
                count[c2[i] -'a']--;
            }
        }*/
        for(int i = 0; i < count.length; i++){ // int[26]是常数，所以时间复杂度O(1)
            if(count[i] > 0){
                return (char)('a' + i);
            }
        }
        return 'a';
    }
    /**
     * another form
     * 既然字符串s比t少一个字符，我们先统计字符串s中每个字符的数量，然后减去字符串t中的每个字符，
     * 如果小于0，说明字符串s比t少的就是这个字符，直接返回即可
     */
    public char findTheDifference7(String s, String t) {
        int count[] = new int[26];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
        }
        for (int i = 0; i < t.length(); i++) {
            if (--count[t.charAt(i) - 'a'] < 0) {
                return t.charAt(i);
            }
        }
        return 'a';
    }
    /**
     * Find sum 加法求和运算
     */
    public char findTheDifference_2(String s, String t) {
        int sum = 0;
        char[] c1 = t.toCharArray();
        char[] c2 = s.toCharArray();

        for(char c : c1){
            sum += c -'a';
        }
        for(char c : c2){
            sum -= c -'a';
        }
        return (char)('a' + sum);
  /*      for(char c : c1){
            sum += c;
        }
        for(char c : c2){
            sum -= c;
        }
        return (char)sum;*/
    }
    /**
     * another from
     */
    public char findTheDifference9(String s, String t) {
        return (char)(Math.abs(sumChar(s) - sumChar(t)));

    }
    //把char转成数字求和
    public int sumChar(String str){
        int sum = 0;
        for(char c : str.toCharArray()){
            sum += (int)c;
        }
        return sum;
    }
    /**
     * XOR 异或
     */
    public char findTheDifference_3(String s, String t) {
        int xor = 0;
        char[] c1 = t.toCharArray();
        char[] c2 = s.toCharArray();

        for(char c : c1){
            xor ^= c;
        }
        for(char c : c2){
            xor ^= c;
        }
        return (char)xor;
    }
    /**
     * XOR - concat string
     */
    public char findTheDifference_4(String s, String t) {
        char exor = 0;
        for (char c : (new StringBuilder()).append(s).append(t).toString().toCharArray()) {
            exor ^= c;
        }
        return exor;
    }
    /**
     * 位运算
     * 因为 t 只比 s 多了一个字母，相当于 只有 1 个字母出现了奇数次，其它字母全部出现了偶数次。
     */
    public char findTheDifference8(String s, String t) {
        int len = s.length();
        char[] chs = s.toCharArray();
        char[] cht = t.toCharArray();
        int res = 0;
        for (int i = 0; i < len; i++) {
            res ^= chs[i] ^ cht[i]; // XOR 运算满足交换律和结合律：a⊕b⊕a = (a⊕a)⊕b = 0⊕b = b
        }
        res ^= cht[len];
        return (char) res;
    }
}
